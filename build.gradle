plugins {
    id "com.github.kt3k.coveralls" version "2.6.3"
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: "groovy"
apply plugin: "application"
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'pmd'

allprojects {
    apply plugin: "java"
    task wrapper(type: Wrapper) {
        gradleVersion = '3.2.1'
    }

    sourceCompatibility = 1.8

    repositories {
        jcenter()
    }
}

// Main class of betsy
mainClassName = "betsy.Main"

repositories {
    maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/tests', 'src/main/java']
        }
        resources {
            srcDirs = ['src/main/groovy', 'src/main/resources', 'src/main/xslt']
        }
    }
}

ext {
    props = new Properties()
    props.load(new File(project.rootDir, "config.properties").newInputStream())
}

configurations {
    internal
    external
}

dependencies {
    internal project(':common')
    internal project(':peal')
    internal project(':pebl')
    internal project(':pebl-builder')
    internal project(':pebl-aggregator')
    internal project(':loader')
    internal 'org.codehaus.groovy:groovy-all:2.4.7'

    internal 'org.apache.ant:ant:1.9.7'
    internal 'org.apache.ant:ant-junit:1.9.7'
    internal 'org.apache.ant:ant-apache-log4j:1.9.7'

    internal 'log4j:log4j:1.2.17'
    internal 'org.virtualbox:vboxjws:4.2.8'
    internal 'commons-daemon:commons-daemon:1.0.15'
    internal 'commons-io:commons-io:2.5'
    internal 'commons-lang:commons-lang:2.6'
    internal 'org.json:json:5.0.5'

    // requires 'net.sf.saxon:Saxon-HE' - we use the one that is shipped with soapUI

    internal 'com.mashape.unirest:unirest-java:1.4.9' // for http requests and responses

    internal 'org.slf4j:slf4j-api:1.7.21'
    internal 'org.slf4j:slf4j-simple:1.7.21'

    internal 'commons-cli:commons-cli:1.3.1' // for the CLI tools

    internal 'org.apache.santuario:xmlsec:2.0.7' // for canonical XML form

    testCompile 'junit:junit:4.12'

    external files(fileTree(dir: "lib", includes: ['*.jar']))

    compile configurations.internal
    compile configurations.external
}

task downloadMaven {
    outputs.file new File("${props.getProperty("downloads.dir")}/${props.getProperty("maven.download.filename")}")

    doLast {
        ant.mkdir dir: props.getProperty("downloads.dir")
        ant.get dest: props.getProperty("downloads.dir"), skipexisting: true,  maxtime: 240, {
            ant.url url: props.getProperty("maven.download.url")
        }
    }
}

task installMaven {
    ext.srcFile = new File("${props.getProperty("downloads.dir")}/${props.getProperty("maven.download.filename")}")
    ext.destDir = new File(props.getProperty("maven.container"))

    inputs.file srcFile
    outputs.dir destDir

    doLast {
        ant.mkdir dir: new File(props.getProperty("maven.home"))
        ant.unzip src: srcFile, dest: destDir
    }
}

task downloadAnt {
    outputs.file new File("${props.getProperty("downloads.dir")}/${props.getProperty("ant.download.filename")}")

    doLast {
        ant.mkdir dir: props.getProperty("downloads.dir")
        ant.get dest: props.getProperty("downloads.dir"), maxtime: 120, {
            ant.url url: props.getProperty("ant.download.url")
        }
    }
}

task installAnt {
    ext.srcFile = new File("${props.getProperty("downloads.dir")}/${props.getProperty("ant.download.filename")}")
    ext.destDir = props.getProperty("ant.container")

    inputs.file srcFile
    outputs.dir props.getProperty("ant.home")

    doLast {
        ant.mkdir dir: destDir
        ant.unzip src: srcFile, dest: destDir
    }

}

installAnt.dependsOn downloadAnt
installMaven.dependsOn downloadMaven
compileGroovy.dependsOn installAnt
compileGroovy.dependsOn installMaven

shadowJar {
    classifier 'fat'
}

run {
    systemProperty "file.encoding", "utf-8"

    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

task internalClasses(dependsOn: classes) {
    inputs.files configurations.internal
    outputs.dir "build/internalClasses"

    doLast {
        copy {
            from { configurations.internal.collect { it.isDirectory() ? it : zipTree(it) } }
            into "build/internalClasses"
        }
    }
}

task zipSingleTestRun(type: Zip) {
    zip64 true

    into("test") {
        from files("test")
    }
    from files("betsy.log")
    from files("betsy_console.log")
    from files("betsy_time.log")

    if(project.hasProperty("zipArchiveBaseName")) {
        baseName = project.zipArchiveBaseName.toString()
    } else {
        // use default
        baseName = "test-folder-and-logs"
    }
}

/**
 * Creates jar file for the virtual machines.
 */
task jarServer(type: Jar, dependsOn: [classes, internalClasses]) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.resources)
    from files("build/internalClasses")

    // results in build/libs/betsy-vms.jar
    classifier = 'vms'
    baseName = 'betsy'

    manifest {
        attributes 'Main-Class': 'betsy.bpel.virtual.server.BetsyVirtualMachineServer', 'Implementation-Title': 'Betsy-VirtualMachineServer'
    }
}

task install(type: JavaExec, dependsOn: jarServer) {
    description = 'Install virtual machines to use the virtual engines'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.bpel.tools.VirtualMachineInstaller"

    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

pmd {
    ignoreFailures = true
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-finalizers',
            'java-imports',
            'java-empty',
            'java-unnecessary',
            'java-junit',
            'java-unusedcode',
            'java-clone',
            'java-migrating',
            'java-naming',
            /*
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-design',
            'java-typeresolution',
            'java-strings',
            'java-sunsecure',
            'java-optimizations',

            'java-strictexception',

            'java-coupling',

            */
    ]
}





jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
